function Decoder(payload, payloadB64) {
    function bytesToHex(bytes) {
        var hex = '';
        for (var i = 0; i < bytes.length; i++) {
            var current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];
            var hexByte = current.toString(16);
            hex += hexByte.length === 1 ? '0' + hexByte : hexByte;
        }
        return hex;
    }
    
    function parsePayload(hex) {
        var offset = 0;

        function toInt(hexString, lengthInBits) {
            var value = parseInt(hexString, 16);
            if(lengthInBits && (value & (1 << (lengthInBits - 1)))) {
                value -= (1 << lengthInBits);
            }
            return value;
        }

        var deviceID = hex.substr(offset, 16); offset += 16;
        var MSI = hex.substr(offset, 16); offset += 16;
        var versionStr = hex.substr(offset, 4); offset += 4;
        var version = toInt(versionStr) / 100;
        var battery = toInt(hex.substr(offset, 4)) / 1000; offset += 4;
        var signal = toInt(hex.substr(offset, 2)); offset += 2;
        var mod = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt = toInt(hex.substr(offset, 2)); offset += 2;
        var Interrupt_level = toInt(hex.substr(offset, 2)); offset += 2;
        var distance = toInt(hex.substr(offset, 4)); offset += 4;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        // 处理有符号经纬度
        var Latitude = toInt(hex.substr(offset, 8), 32) / 1000000; offset += 8;
        var Longitude = toInt(hex.substr(offset, 8), 32) / 1000000; offset += 8;
        var gps_timestamp = toInt(hex.substr(offset, 8)); offset += 8;

        var dataSet = [];
        // 确保读取所有数据组 (每组12个字符)
        while (offset + 12 <= hex.length) {
            var distance1 = toInt(hex.substr(offset, 4)); offset += 4;
            var timestampLog = toInt(hex.substr(offset, 8)); offset += 8;
            dataSet.push({ distance1: distance1, timestamp: timestampLog });
        }

        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            mod: mod,
            Interrupt_level: Interrupt_level,
            interrupt: interrupt,
            distance: distance,
            Latitude: Latitude,
            Longitude: Longitude,
            timestamp: timestamp,
            gps_timestamp: gps_timestamp,
            dataSet: dataSet,
        };
    }

    var payloadHex = bytesToHex(payload);
    var parsedData = parsePayload(payloadHex);
    
    var result = [];
    var mainTimestamp = parsedData.timestamp;

    // 添加主字段 (兼容旧语法)
    var fields = [
        {field: "BATTERY", key: "battery"},
        {field: "SIGNAL", key: "signal"},
        {field: "MOD", key: "mod"},
        {field: "INTERRUPT", key: "interrupt"},
        {field: "Interrupt_level", key: "Interrupt_level"},
        {field: "distance", key: "distance"},
        {field: "gps_timestamp", key: "gps_timestamp"},
        {field: "Latitude", key: "Latitude"},
        {field: "Longitude", key: "Longitude"}
    ];
    
    for (var i = 0; i < fields.length; i++) {
        result.push({
            field: fields[i].field,
            value: parsedData[fields[i].key],
            timestamp: mainTimestamp
        });
    }

    // 添加所有数据组
    for (var j = 0; j < parsedData.dataSet.length; j++) {
        var data = parsedData.dataSet[j];
        result.push({
            field: "distance",
            value: data.distance1,
            timestamp: data.timestamp
        });
    }

    return result;
}