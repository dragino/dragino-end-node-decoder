function Decoder(payload, payloadB64) {
    // payload is the decoded payload
    // payloadB64 is base64-encoded

    function bytesToHex(bytes) {
        var hex = '';
        for (var i = 0; i < bytes.length; i++) {
            var current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];
            var hexByte = current.toString(16);
            hex += hexByte.length === 1 ? '0' + hexByte : hexByte;
        }
        return hex;
    }

    function parsePayload(hex) {
        var offset = 0;

        function toInt(hexString, lengthInBits) {
            var value = parseInt(hexString, 16);
            
            if(lengthInBits && (value & (1 << (lengthInBits - 1)))) {  // Check the MSB
                value -= (1 << lengthInBits);  // two's complement conversion
            }
            
            return value;
        }

        var deviceID = hex.substr(offset, 16); offset += 16;
		var IMSI = hex.substr(offset, 16); offset += 16;
        var versionStr = hex.substr(offset, 4); offset += 4;
        var version = toInt(versionStr) / 100;
        var battery = toInt(hex.substr(offset, 4)) / 1000; offset += 4;
        var signal = toInt(hex.substr(offset, 2)); offset += 2;
        var direction = toInt(hex.substr(offset, 2)); offset += 2;
        var alarm  = toInt(hex.substr(offset, 2)); offset += 2;
        var Level_PA4 = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt = toInt(hex.substr(offset, 2)); offset += 2;
        var Interrupt_level = toInt(hex.substr(offset, 2)); offset += 2;
        var ds18b201 = toInt(hex.substr(offset, 4))/10; offset += 4;
        var roll1 = toInt(hex.substr(offset, 4))/100; offset += 4;
        var pitch1 = toInt(hex.substr(offset, 4))/100; offset += 4;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        try {
            
            // Parse the higher byte for sensor model
            var sensorModelHex = versionStr.substr(0, 2);
            var sensorModel = parseInt(sensorModelHex, 16);
            
            // Parse the lower byte for software version
            var versionHex = versionStr.substr(2, 2);
            var versionInt = parseInt(versionHex, 16);
            
            // Convert versionInt to version string
            var versionStr = (Math.floor(versionInt / 100)) + '.' + 
                             (Math.floor((versionInt % 100) / 10)) + '.' + 
                             (versionInt % 10);
                             
            console.log('Sensor Model: ' + sensorModel)
            console.log('Version: ' + versionStr)
            
        } catch(e) {
            console.log("Error parsing version")
            console.log(JSON.stringify(e))
        }

        var dataSet = [];

        while (offset < hex.length) {
            var ds18b20 = toInt(hex.substr(offset, 4))/10; offset += 4;
            var roll = toInt(hex.substr(offset, 4))/100; offset += 4;
            var pitch = toInt(hex.substr(offset, 4))/100; offset += 4;
            var timestampLog = toInt(hex.substr(offset, 8)); offset += 8;
            dataSet.push({ ds18b20: ds18b20,roll: roll,pitch: pitch,  timestamp: timestampLog });
        }

        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            direction: direction,
            alarm: alarm,
            Level_PA4: Level_PA4,
            interrupt: interrupt,
            Interrupt_level: Interrupt_level,
            ds18b20: ds18b20,
            roll: roll,
            pitch: pitch,
            ds18b201: ds18b201,
            roll1: roll1,
            pitch: pitch1,
            times1tamp: timestamp,
            dataSet: dataSet
        };
    }

    var payloadHex = bytesToHex(payloadB64);
    var parsedData = parsePayload(payloadHex);
    
    payload = parsedData

    // Extract the deviceID from the incoming data
    var deviceID = payload.deviceID;

    // Preparing to return data to Datacake...
    // Extract main attributes
    var mainBattery = payload.battery;
    var mainSignal = payload.signal;
    var maindirection = payload.direction;
    var mainLevel_PA4 = payload.Level_PA4;
    var maininterrupt = payload.interrupt;
    var mainInterrupt_level = payload.Interrupt_level;
    var mainds18b20 = payload.ds18b201;
    var mainalarm = payload.alarm;
    var mainroll = payload.roll1;
    var mainpitch = payload.pitch1;
    var mainTimestamp = payload.timestamp;
    console.log(mainTimestamp)
    // Initialize result array
    var result = [];

    // Add main attributes to result array
    result.push({
        field: "DeviceID",
        value: deviceID,
        timestamp: mainTimestamp
    });
    result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
    result.push({
        field: "direction",
        value: maindirection,
        timestamp: mainTimestamp
    });
    result.push({
        field: "alarm",
        value: mainalarm,
        timestamp: mainTimestamp
    });
    result.push({
        field: "Level_PA4",
        value: mainLevel_PA4,
        timestamp: mainTimestamp
    });
    result.push({
        field: "interrupt",
        value: maininterrupt,
        timestamp: mainTimestamp
    });
    result.push({
        field: "Interrupt_level",
        value: mainInterrupt_level,
        timestamp: mainTimestamp
    });
    result.push({
        field: "ds18b20",
        value: mainds18b20,
        timestamp: mainTimestamp
    });
    result.push({
        field: "roll",
        value: mainroll,
        timestamp: mainTimestamp
    });
    result.push({
        field: "pitch",
        value: mainpitch,
        timestamp: mainTimestamp
    });
   

    // Extract data from dataSet array
    var dataSet = payload.dataSet;
    
    for (var i = 0; i < dataSet.length; i++) {
        var data = dataSet[i];
        var ds18b20 = data.ds18b20;
        var roll = data.roll;
        var pitch = data.pitch;
        var timestamp = data.timestamp;
        console.log(timestamp)
        
        result.push({
            field: "ds18b20",
            value: ds18b20,
            timestamp: timestamp
        });
        result.push({
            field: "roll",
            value: roll,
            timestamp: timestamp
        });
        result.push({
            field: "pitch",
            value: pitch,
            timestamp: timestamp
        });
    }

    return result;
}