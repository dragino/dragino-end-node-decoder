function Decoder(payload, payloadB64) {
    // payload is the decoded payload
    // payloadB64 is base64-encoded

    function bytesToHex(bytes) {
        var hex = '';
        for (var i = 0; i < bytes.length; i++) {
            var current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];
            var hexByte = current.toString(16);
            hex += hexByte.length === 1 ? '0' + hexByte : hexByte;
        }
        return hex;
    }

    function parsePayload(hex) {
        var offset = 0;

        function toInt(hexString, lengthInBits) {
            var value = parseInt(hexString, 16);
            
            if(lengthInBits && (value & (1 << (lengthInBits - 1)))) {  // Check the MSB
                value -= (1 << lengthInBits);  // two's complement conversion
            }
            
            return value;
        }

        var deviceID = hex.substr(offset, 16); offset += 16;
		var IMSI = hex.substr(offset, 16); offset += 16;
        var versionStr = hex.substr(offset, 4); offset += 4;
        var version = toInt(versionStr) / 100;
        var battery = toInt(hex.substr(offset, 4)) / 1000; offset += 4;
        var signal = toInt(hex.substr(offset, 2)); offset += 2;
        var GPIO_EXIT_Level  = toInt(hex.substr(offset, 2)); offset += 2;
        var GPIO_EXIT_Flag = toInt(hex.substr(offset, 2)); offset += 2;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        var Payload_version = toInt(hex.substr(offset, 2)); offset += 2;
        try {
            
            // Parse the higher byte for sensor model
            var sensorModelHex = versionStr.substr(0, 2);
            var sensorModel = parseInt(sensorModelHex, 16);
            
            // Parse the lower byte for software version
            var versionHex = versionStr.substr(2, 2);
            var versionInt = parseInt(versionHex, 16);
            
            // Convert versionInt to version string
            var versionStr = (Math.floor(versionInt / 100)) + '.' + 
                             (Math.floor((versionInt % 100) / 10)) + '.' + 
                             (versionInt % 10);
                             
            console.log('Sensor Model: ' + sensorModel)
            console.log('Version: ' + versionStr)
            
        } catch(e) {
            console.log("Error parsing version")
            console.log(JSON.stringify(e))
        }

        

        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            GPIO_EXIT_Level: GPIO_EXIT_Level,
            GPIO_EXIT_Flag: GPIO_EXIT_Flag,
            timestamp: timestamp,
            Payload_version: Payload_version
        };
    }

    var payloadHex = bytesToHex(payloadB64);
    var parsedData = parsePayload(payloadHex);
    
    payload = parsedData

    // Extract the deviceID from the incoming data
    var deviceID = payload.deviceID;

    // Preparing to return data to Datacake...
    // Extract main attributes
    var mainBattery = payload.battery;
    var mainSignal = payload.signal;
    var mainGPIO_EXIT_Level = payload.GPIO_EXIT_Level;
    var mainGPIO_EXIT_Flag = payload.GPIO_EXIT_Flag;
    var mainPayload_version = payload.Payload_version;
    var mainTimestamp = payload.timestamp;
    console.log(mainTimestamp)
    // Initialize result array
    var result = [];

    // Add main attributes to result array
    result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
   
    result.push({
        field: "GPIO_EXIT_Level",
        value: mainGPIO_EXIT_Level,
        timestamp: mainTimestamp
    });
    result.push({
        field: "GPIO_EXIT_Flag",
        value: mainGPIO_EXIT_Flag,
        timestamp: mainTimestamp
    });
    result.push({
        field: "Payload_version",
        value: mainPayload_version,
        timestamp: mainTimestamp
    });
   
    // Extract data from dataSet array
    var dataSet = payload.dataSet;
    
   

    return result;
}
