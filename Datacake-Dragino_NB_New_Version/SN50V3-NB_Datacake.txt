function Decoder(payload, payloadB64) {
    // payload is the decoded payload
    // payloadB64 is base64-encoded

    function bytesToHex(bytes) {
        var hex = '';
        for (var i = 0; i < bytes.length; i++) {
            var current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];
            var hexByte = current.toString(16);
            hex += hexByte.length === 1 ? '0' + hexByte : hexByte;
        }
        return hex;
    }

    function parsePayload(hex) {
        var offset = 0;

        function toInt(hexString, lengthInBits) {
            var value = parseInt(hexString, 16);
            
            if(lengthInBits && (value & (1 << (lengthInBits - 1)))) {  // Check the MSB
                value -= (1 << lengthInBits);  // two's complement conversion
            }
            
            return value;
        }

        var deviceID = hex.substr(offset, 16); offset += 16;
		var IMSI = hex.substr(offset, 16); offset += 16;
        var versionStr = hex.substr(offset, 4); offset += 4;
        var version = toInt(versionStr) / 100;
        var battery = toInt(hex.substr(offset, 4)) / 1000; offset += 4;
        var signal = toInt(hex.substr(offset, 2)); offset += 2;
        var mod = toInt(hex.substr(offset, 2)); offset += 2;
        if (mod == 1)
        {
            
        
        var tempDS18B20 = toInt(hex.substr(offset, 4), 16)/10; offset += 4;
        var PA4_LEVEL = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt_level = toInt(hex.substr(offset, 2)); offset += 2;
        var adc = toInt(hex.substr(offset, 4)); offset += 4;
        var shtTemp = toInt(hex.substr(offset, 4), 16) / 10; offset += 4;
        var shtHum = toInt(hex.substr(offset, 4)) / 10; offset += 4;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            mod: mod,
            tempDS18B20: tempDS18B20,
            PA4_LEVEL: PA4_LEVEL
            interrupt: interrupt,
            interrupt_level: interrupt_level,
            adc: adc,
            shtTemp: shtTemp,
            shtHum: shtHum,
            timestamp: timestamp,
   
        };
        }
        
        if (mod == 2)
        {
            
        
        var tempDS18B20 = toInt(hex.substr(offset, 4), 16)/10; offset += 4;
        var PA4_LEVEL = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt_level = toInt(hex.substr(offset, 2)); offset += 2;
        var adc = toInt(hex.substr(offset, 4)); offset += 4;
        var Distance = toInt(hex.substr(offset, 4), 16) / 10; offset += 4;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            mod: mod,
            tempDS18B20: tempDS18B20,
            PA4_LEVEL: PA4_LEVEL
            interrupt: interrupt,
            interrupt_level: interrupt_level,
            adc: adc,
            timestamp: timestamp,
            Distance : Distance,
   
            
        };
        }
        if (mod == 3)
        {
            
        
        var ADC1 = toInt(hex.substr(offset, 4), 16); offset += 4;
        var PA4_LEVEL = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt_level = toInt(hex.substr(offset, 2)); offset += 2;
        var ADC2 = toInt(hex.substr(offset, 4)); offset += 4;
        var shtTemp = toInt(hex.substr(offset, 4), 16) / 10; offset += 4;
        var shtHum = toInt(hex.substr(offset, 4)) / 10; offset += 4;
        var ADC3 = toInt(hex.substr(offset, 4)); offset += 4;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            mod: mod,
            tempDS18B20: tempDS18B20,
            PA4_LEVEL: PA4_LEVEL
            interrupt: interrupt,
            interrupt_level: interrupt_level,
            adc: adc,
            shtTemp: shtTemp,
            shtHum: shtHum,
            timestamp: timestamp,
            ADC1: ADC1,
            ADC2: ADC2,
            ADC3: ADC3,
     
            
        };
        }
        if (mod == 4)
        {
            
        
        var tempDS18B20 = toInt(hex.substr(offset, 4), 16)/10; offset += 4;
        var adc = toInt(hex.substr(offset, 4)); offset += 4;
        var PA4_LEVEL = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt_level = toInt(hex.substr(offset, 2)); offset += 2;
        var tempDS18B202 = toInt(hex.substr(offset, 4), 16)/10; offset += 4;
        var tempDS18B203 = toInt(hex.substr(offset, 4), 16)/10; offset += 4;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            mod: mod,
            tempDS18B20: tempDS18B20,
            PA4_LEVEL: PA4_LEVEL
            interrupt: interrupt,
            interrupt_level: interrupt_level,
            adc: adc,
            timestamp: timestamp,
            tempDS18B202: tempDS18B202,
            tempDS18B203: tempDS18B203,
     
        };
        }
        if (mod == 5)
        {
            
        
        var tempDS18B20 = toInt(hex.substr(offset, 4), 16)/10; offset += 4;
        var adc = toInt(hex.substr(offset, 4)); offset += 4;
        var PA4_LEVEL = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt = toInt(hex.substr(offset, 2)); offset += 2;
        var interrupt_level = toInt(hex.substr(offset, 2)); offset += 2;
        var Weigt    = toInt(hex.substr(offset, 4), 16) ; offset += 4;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        
        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            mod: mod,
            tempDS18B20: tempDS18B20,
            PA4_LEVEL: PA4_LEVEL
            interrupt: interrupt,
            interrupt_level: interrupt_level,
            adc: adc,
            timestamp: timestamp,
            Weigt: Weigt,
         
            
        };
        }
        if (mod == 6)
        {
        var pulse_count = toInt(hex.substr(offset, 8), 16); offset += 8;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        
        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            mod: mod,
            timestamp: timestamp,
            pulse_count:pulse_count,
            
        };
        }
        try {
            
            // Parse the higher byte for sensor model
            var sensorModelHex = versionStr.substr(0, 2);
            var sensorModel = parseInt(sensorModelHex, 16);
            
            // Parse the lower byte for software version
            var versionHex = versionStr.substr(2, 2);
            var versionInt = parseInt(versionHex, 16);
            
            // Convert versionInt to version string
            var versionStr = (Math.floor(versionInt / 100)) + '.' + 
                             (Math.floor((versionInt % 100) / 10)) + '.' + 
                             (versionInt % 10);
                             
            console.log('Sensor Model: ' + sensorModel)
            console.log('Version: ' + versionStr)
            
        } catch(e) {
            console.log("Error parsing version")
            console.log(JSON.stringify(e))
        }

    }

    var payloadHex = bytesToHex(payloadB64);
    var parsedData = parsePayload(payloadHex);
    
    payload = parsedData

    // Extract the deviceID from the incoming data
    var deviceID = payload.deviceID;

    // Preparing to return data to Datacake...
    // Extract main attributes
    var mainBattery = payload.battery;
    var mainSignal = payload.signal;
    var mainMod = payload.mod;
    var mainTempDS18B20 = payload.tempDS18B20;
    var mainPA4_LEVEL = payload.PA4_LEVEL;
    var mainInterrupt = payload.interrupt;
    var mainINTERRUPT_level = payload.interrupt_level;
    var mainAdc = payload.adc;
    var mainShtTemp = payload.shtTemp;
    var mainShtHum = payload.shtHum;
    var mainTimestamp = payload.timestamp;
    var mainDistance = payload.Distance;
    var mainADC1 = payload.ADC1;
    var mainADC2 = payload.ADC2;
    var mainADC3 = payload.ADC3;
    var maintempDS18B201 = payload.tempDS18B201;
    var maintempDS18B202 = payload.tempDS18B202;
    var maintempDS18B203 = payload.tempDS18B203;
    var mainWeigt = payload.Weigt;
    var mainpulse_count = payload.pulse_count;
    console.log(mainTimestamp)
    // Initialize result array
    var result = [];
if (mainMod == 1)
{   
    result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
    result.push({
        field: "MOD",
        value: mainMod,
        timestamp: mainTimestamp
    });
    result.push({
        field: "TEMPDS18B20",
        value: mainTempDS18B20,
        timestamp: mainTimestamp
    });
    result.push({
        field: "PA4_LEVEL",
        value: mainPA4_LEVEL,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT",
        value: mainInterrupt,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT_level",
        value: mainINTERRUPT_level,
        timestamp: mainTimestamp
    });
    result.push({
        field: "ADC",
        value: mainAdc,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SHTTEMP",
        value: mainShtTemp,
        timestamp: mainTimestamp
    });
    result.push({
        field: "ShtHum",
        value: mainShtHum,
        timestamp: mainTimestamp
    });
    return result;
    }
if (mainMod == 2)  
 {
     
    result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
    result.push({
        field: "MOD",
        value: mainMod,
        timestamp: mainTimestamp
    });
    result.push({
        field: "TEMPDS18B20",
        value: mainTempDS18B20,
        timestamp: mainTimestamp
    });
    result.push({
        field: "PA4_LEVEL",
        value: mainPA4_LEVEL,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT",
        value: mainInterrupt,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT_level",
        value: mainINTERRUPT_level,
        timestamp: mainTimestamp
    });
     result.push({
        field: "Distance",
        value: mainDistance,
        timestamp: mainTimestamp
    });
return result;
 }
if (mainMod == 3)  
{
   result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
    result.push({
        field: "MOD",
        value: mainMod,
        timestamp: mainTimestamp
    });
    result.push({
        field: "TEMPDS18B20",
        value: mainTempDS18B20,
        timestamp: mainTimestamp
    });
    result.push({
        field: "PA4_LEVEL",
        value: mainPA4_LEVEL,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT",
        value: mainInterrupt,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT_level",
        value: mainINTERRUPT_level,
        timestamp: mainTimestamp
    }); 
    result.push({
        field: "SHTTEMP",
        value: mainShtTemp,
        timestamp: mainTimestamp
    });
    result.push({
        field: "ShtHum",
        value: mainShtHum,
        timestamp: mainTimestamp
    });
    result.push({
        field: "ADC1",
        value: mainADC1,
        timestamp: mainTimestamp
    });
    result.push({
        field: "ADC2",
        value: mainADC2,
        timestamp: mainTimestamp
    });
    result.push({
        field: "ADC3",
        value: mainADC3,
        timestamp: mainTimestamp
    });
return result; 
}  
if (mainMod == 4)  
{
  result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
    result.push({
        field: "MOD",
        value: mainMod,
        timestamp: mainTimestamp
    });
    result.push({
        field: "TEMPDS18B20",
        value: mainTempDS18B20,
        timestamp: mainTimestamp
    });
    result.push({
        field: "PA4_LEVEL",
        value: mainPA4_LEVEL,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT",
        value: mainInterrupt,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT_level",
        value: mainINTERRUPT_level,
        timestamp: mainTimestamp
    });  
    result.push({
        field: "tempDS18B202",
        value: maintempDS18B202,
        timestamp: mainTimestamp
    });
    result.push({
        field: "tempDS18B203",
        value: maintempDS18B203,
        timestamp: mainTimestamp
    });
    return result; 
}
if (mainMod == 5)  
{
    result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
    result.push({
        field: "MOD",
        value: mainMod,
        timestamp: mainTimestamp
    });
    result.push({
        field: "TEMPDS18B20",
        value: mainTempDS18B20,
        timestamp: mainTimestamp
    });
    result.push({
        field: "PA4_LEVEL",
        value: mainPA4_LEVEL,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT",
        value: mainInterrupt,
        timestamp: mainTimestamp
    });
    result.push({
        field: "INTERRUPT_level",
        value: mainINTERRUPT_level,
        timestamp: mainTimestamp
    });  
     result.push({
        field: "Weigt",
        value: mainWeigt,
        timestamp: mainTimestamp
    });

    return result; 
}

if (mainMod == 6)  
{ 
     result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });
    result.push({
        field: "MOD",
        value: mainMod,
        timestamp: mainTimestamp
    });
    result.push({
        field: "pulse_count",
        value: mainpulse_count,
        timestamp: mainTimestamp
    });
    
    return result;
 }
}