function Decoder(payload, payloadB64) {
    // payload is the decoded payload
    // payloadB64 is base64-encoded

    function bytesToHex(bytes) {
        var hex = '';
        for (var i = 0; i < bytes.length; i++) {
            var current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];
            var hexByte = current.toString(16);
            hex += hexByte.length === 1 ? '0' + hexByte : hexByte;
        }
        return hex;
    }
  
   
    function parsePayload(hex) {
        var offset = 0;

        function toInt(hexString, lengthInBits) {
            var value = parseInt(hexString, 16);
            
            if(lengthInBits && (value & (1 << (lengthInBits - 1)))) {  // Check the MSB
                value -= (1 << lengthInBits);  // two's complement conversion
            }
            
            return value;
        }
    
        var deviceID = hex.substr(offset, 16); offset += 16;
		var IMSI = hex.substr(offset, 16); offset += 16;
        var version = toInt(hex.substr(offset, 4)) / 100; offset += 4;
        var battery = toInt(hex.substr(offset, 4)) / 1000; offset += 4;
        var signal = toInt(hex.substr(offset, 2)); offset += 2;
        var gpio_level = toInt(hex.substr(offset, 2)); offset += 2;
        var gpio_flag = toInt(hex.substr(offset, 2)); offset += 2;
        var timestamp = toInt(hex.substr(offset, 8)); offset += 8;
        var payload_version = toInt(hex.substr(offset, 2)); offset += 2;
        var sensor_data= hex.substr(offset); 
        var dataSet = [];

        while (offset < hex.length) {
            var shtTemp = toInt(hex.substr(offset, 4), 16) / 10; offset += 4;
            var shtHum = toInt(hex.substr(offset, 4)) / 10; offset += 4;
            var timestampLog = toInt(hex.substr(offset, 8)); offset += 8;
            dataSet.push({ shtTemp: shtTemp, shtHum: shtHum, timestamp: timestampLog });
        }

        return {
            deviceID: deviceID,
            version: version,
            battery: battery,
            signal: signal,
            timestamp: timestamp,
            gpio_level: gpio_level,
            gpio_flag: gpio_flag,
            payload_version:payload_version,
            sensor_data: sensor_data,
        };
    }

    var payloadHex = bytesToHex(payloadB64);
    var parsedData = parsePayload(payloadHex);
    
    payload = parsedData

    // Extract the deviceID from the incoming data
    var deviceID = payload.deviceID;

    // Preparing to return data to Datacake...
    // Extract main attributes
    var mainBattery = payload.battery;
    var mainSignal = payload.signal;
    var mainMod = payload.mod;
    var maingpio_level = payload.gpio_level;
    var maingpio_flag = payload.gpio_flag;
    var mainTimestamp = payload.timestamp;
    var mainpayload_version = payload.payload_version;
    var mainsensor_data = payload.sensor_data;
    console.log(mainTimestamp)
    // Initialize result array
    
    var asciiString = "";

    for (var i = 0; i < mainsensor_data.length; i += 2) {
        var hex = mainsensor_data.substr(i, 2);
        var decimal = parseInt(hex, 16);
        var ascii = String.fromCharCode(decimal);
        asciiString += ascii;
    }

    var converted_data = asciiString;

    var result = [];

    // Add main attributes to result array
    result.push({
        field: "BATTERY",
        value: mainBattery,
        timestamp: mainTimestamp
    });
    result.push({
        field: "SIGNAL",
        value: mainSignal,
        timestamp: mainTimestamp
    });

   
    result.push({
        field: "deviceID",
        value: deviceID,
        timestamp: mainTimestamp
    });
    result.push({
        field: "gpio_level",
        value: maingpio_level,
        timestamp: mainTimestamp
    }); 
    result.push({
        field: "gpio_flag",
        value: maingpio_flag,
        timestamp: mainTimestamp
    });
    result.push({
        field: "payload_version",
        value: mainpayload_version,
        timestamp: mainTimestamp
    });
    result.push({
        field: "sdi12_data",
        value: converted_data,
        timestamp: mainTimestamp
    });
   
    // Extract data from dataSet array
    var dataSet = payload.dataSet;
    
   

    return result;
}